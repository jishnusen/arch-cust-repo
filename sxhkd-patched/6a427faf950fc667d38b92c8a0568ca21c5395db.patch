From 6a427faf950fc667d38b92c8a0568ca21c5395db Mon Sep 17 00:00:00 2001
From: shao113 <3928786+shao113@users.noreply.github.com>
Date: Tue, 4 Aug 2020 15:43:42 -0400
Subject: [PATCH] rework signals to make use of sigaction/pselect

...in attempt to reduce window for race conditions to occur
---
 Makefile    |  2 +-
 src/sxhkd.c | 79 +++++++++++++++++++++++++++++++++++------------------
 src/sxhkd.h |  5 +++-
 3 files changed, 58 insertions(+), 28 deletions(-)

diff --git a/Makefile b/Makefile
index 01f088b..1d54234 100644
--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@ OUT      = sxhkd
 VERCMD  ?= git describe --tags 2> /dev/null
 VERSION := $(shell $(VERCMD) || cat VERSION)
 
-CPPFLAGS += -D_POSIX_C_SOURCE=200112L -DVERSION=\"$(VERSION)\"
+CPPFLAGS += -D_POSIX_C_SOURCE=200809L -DVERSION=\"$(VERSION)\"
 CFLAGS   += -std=c99 -pedantic -Wall -Wextra
 LDFLAGS  ?=
 LDLIBS    = $(LDFLAGS) -lxcb -lxcb-keysyms
diff --git a/src/sxhkd.c b/src/sxhkd.c
index d04a872..ca7e644 100644
--- a/src/sxhkd.c
+++ b/src/sxhkd.c
@@ -33,6 +33,8 @@
 #include <fcntl.h>
 #include <signal.h>
 #include <stdbool.h>
+#include <errno.h>
+#include <string.h>
 #include "parse.h"
 #include "grab.h"
 
@@ -52,7 +54,8 @@ int mapping_count;
 int timeout;
 
 hotkey_t *hotkeys_head, *hotkeys_tail;
-bool running, grabbed, toggle_grab, reload, bell, chained, locked;
+bool grabbed, chained, locked;
+volatile sig_atomic_t running, toggle_grab, reload, bell;
 xcb_keysym_t abort_keysym;
 chord_t *abort_chord;
 
@@ -130,13 +133,6 @@ int main(int argc, char *argv[])
 		}
 	}
 
-	signal(SIGINT, hold);
-	signal(SIGHUP, hold);
-	signal(SIGTERM, hold);
-	signal(SIGUSR1, hold);
-	signal(SIGUSR2, hold);
-	signal(SIGALRM, hold);
-
 	setup();
 	get_standard_keysyms();
 	get_lock_fields();
@@ -153,14 +149,19 @@ int main(int argc, char *argv[])
 
 	reload = toggle_grab = bell = chained = locked = false;
 	running = true;
+	
+	sigset_t omask;
+	setup_signals(&omask);
 
 	xcb_flush(dpy);
 
 	while (running) {
 		FD_ZERO(&descriptors);
 		FD_SET(fd, &descriptors);
+		
+		int res = pselect(fd + 1, &descriptors, NULL, NULL, NULL, &omask);
 
-		if (select(fd + 1, &descriptors, NULL, NULL, NULL) > 0) {
+		if (res > 0) {
 			while ((evt = xcb_poll_for_event(dpy)) != NULL) {
 				uint8_t event_type = XCB_EVENT_RESPONSE_TYPE(evt);
 				switch (event_type) {
@@ -179,25 +180,23 @@ int main(int argc, char *argv[])
 				}
 				free(evt);
 			}
-		}
-
-		if (reload) {
-			signal(SIGUSR1, hold);
-			reload_cmd();
-			reload = false;
-		}
+		} else if (res == -1 && errno == EINTR) {
+			// a signal was caught during pselect
+			if (reload) {
+				reload_cmd();
+				reload = false;
+			}
 
-		if (toggle_grab) {
-			signal(SIGUSR2, hold);
-			toggle_grab_cmd();
-			toggle_grab = false;
-		}
+			if (toggle_grab) {
+				toggle_grab_cmd();
+				toggle_grab = false;
+			}
 
-		if (bell) {
-			signal(SIGALRM, hold);
-			put_status(TIMEOUT_PREFIX, "Timeout reached");
-			abort_chain();
-			bell = false;
+			if (bell) {
+				put_status(TIMEOUT_PREFIX, "Timeout reached");
+				abort_chain();
+				bell = false;
+			}
 		}
 
 		if (xcb_connection_has_error(dpy)) {
@@ -313,6 +312,34 @@ void cleanup(void)
 	hotkeys_head = hotkeys_tail = NULL;
 }
 
+void setup_signals(sigset_t *omask)
+{
+	struct sigaction sa;
+	sigset_t mask;
+	
+	sigemptyset(&mask);
+	sigaddset(&mask, SIGINT);
+	sigaddset(&mask, SIGHUP);
+	sigaddset(&mask, SIGTERM);
+	sigaddset(&mask, SIGUSR1);
+	sigaddset(&mask, SIGUSR2);
+	sigaddset(&mask, SIGALRM);
+	
+	memset(&sa, 0, sizeof(sa));
+	sa.sa_handler = hold;
+	sa.sa_mask = mask;
+	sa.sa_flags = SA_RESTART;
+	
+	sigaction(SIGINT, &sa, NULL);
+	sigaction(SIGHUP, &sa, NULL);
+	sigaction(SIGTERM, &sa, NULL);
+	sigaction(SIGUSR1, &sa, NULL);
+	sigaction(SIGUSR2, &sa, NULL);
+	sigaction(SIGALRM, &sa, NULL);
+	
+	sigprocmask(SIG_BLOCK, &mask, omask);
+}
+
 void reload_cmd(void)
 {
 	PUTS("reload");
diff --git a/src/sxhkd.h b/src/sxhkd.h
index 7981eb5..c1f9244 100644
--- a/src/sxhkd.h
+++ b/src/sxhkd.h
@@ -28,6 +28,7 @@
 #include <xcb/xcb_keysyms.h>
 #include <stdio.h>
 #include <stdbool.h>
+#include <signal.h>
 #include "types.h"
 #include "helpers.h"
 
@@ -58,7 +59,8 @@ extern int mapping_count;
 extern int timeout;
 
 extern hotkey_t *hotkeys_head, *hotkeys_tail;
-extern bool running, grabbed, toggle_grab, reload, bell, chained, locked;
+extern bool grabbed, chained, locked;
+extern volatile sig_atomic_t running, toggle_grab, reload, bell;
 extern xcb_keysym_t abort_keysym;
 extern chord_t *abort_chord;
 
@@ -70,6 +72,7 @@ void key_button_event(xcb_generic_event_t *evt, uint8_t event_type);
 void mapping_notify(xcb_generic_event_t *evt);
 void setup(void);
 void cleanup(void);
+void setup_signals(sigset_t *omask);
 void reload_cmd(void);
 void toggle_grab_cmd(void);
 void hold(int sig);
